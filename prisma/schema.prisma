// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
   id                String  @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String  @id @default(uuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?

  image             String?
  accounts          Account[]
  sessions          Session[]
  createdSubreddits Subreddit[]    @relation(name: "CreateBy")
  posts             Post[]
  comments          Comment[]
  commentVotes      CommentVote[]
  votes             Vote[]
  Subscription      Subscription[]
}

model Subreddit {
  id                String  @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post[]

  creatorId  String?
  creator    User?          @relation(name: "CreateBy", fields: [creatorId], references: [id])
  subcribers Subscription[]

  @@index([name])
}

model Subscription {
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, subredditId])
}

model Post {
  id                String  @id @default(uuid())
  title       String
  content     Json?
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  comments Comment[]
  votes    Vote[]
}

model Comment {
  id                String  @id @default(uuid())
  text     String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String

  replyToId String?
  replyTo   Comment?      @relation(name: "CommentReply", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Comment   Comment[]     @relation(name: "CommentReply")
  votes     CommentVote[]
  commendId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  commendId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      VoteType
  comment   Comment  @relation(fields: [commendId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, commendId])
}
